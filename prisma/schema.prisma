// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model UsuarioInativo {
    id               Int      @id @default(autoincrement())
    username         String   @unique
    nome             String
    email            String?
    departamento     String?
    departamento_sgu String?
    ultimo_login     String
    dias_inativos    Int
    status           Status   @default(PENDENTE)
    data_criacao     DateTime @default(now())
    data_atualizacao DateTime @updatedAt
    servidor_origem  String
    ou_origem        String

    @@index([username])
    @@index([status])
    @@index([dias_inativos])
    @@map("usuarios_inativos")
}

model ComputadorInativo {
    id                  Int      @id @default(autoincrement())
    nome_computador     String   @unique
    ip_address          String?
    mac_address         String?
    departamento        String?
    departamento_sgu    String?
    usuario_responsavel String?
    ultimo_login        String
    dias_inativos       Int
    status              Status   @default(PENDENTE)
    data_criacao        DateTime @default(now())
    data_atualizacao    DateTime @updatedAt
    servidor_origem     String
    ou_origem           String
    sistema_operacional String?
    versao_so           String?

    @@index([nome_computador])
    @@index([status])
    @@index([dias_inativos])
    @@index([ip_address])
    @@map("computadores_inativos")
}

model UsuarioExoneradoTransferido {
    id                Int             @id @default(autoincrement())
    username          String          @unique
    nome              String
    email             String?
    departamento_ldap String?
    departamento_sgu  String?
    cargo             String?
    vinculo           String?
    rf                String?
    existe_ldap       Boolean         @default(false)
    data_verificacao  DateTime        @default(now())
    status            StatusExonerado @default(PENDENTE)
    data_criacao      DateTime        @default(now())
    data_atualizacao  DateTime        @updatedAt
    observacoes       String?

    @@index([username])
    @@index([status])
    @@index([existe_ldap])
    @@map("usuarios_exonerados_transferidos")
}

enum Status {
    EXONERADO
    TRANSFERIDO
    LIP
    AFASTADO_PARA_OUTRO_ORGAO
    LICENCA_MEDICA
    PENDENTE
    USUARIO_CORINGA

    @@map("Status")
}

enum StatusExonerado {
    EXONERADO
    TRANSFERIDO
    LIP
    AFASTADO_PARA_OUTRO_ORGAO
    LICENCA_MEDICA
    PENDENTE
    USUARIO_CORINGA
    ATIVO_LDAP
    INATIVO_LDAP

    @@map("StatusExonerado")
}

// Novo modelo para sistema de tickets
model Ticket {
    id               Int          @id @default(autoincrement())
    username         String       @unique
    nome             String
    email            String?
    departamento     String?
    empresa          String?
    status_ldap      StatusLDAP   @default(NAO_ENCONTRADO)
    ultimo_login     String?
    dias_sem_logar   Int?
    status_sgu       StatusSGU    @default(NAO_ENCONTRADO)
    setor_sgu        String?
    status_ticket    StatusTicket @default(PENDENTE)
    acao             AcaoTicket?
    fechado          Boolean      @default(false)
    observacoes      String?
    data_criacao     DateTime     @default(now())
    data_atualizacao DateTime     @updatedAt
    servidor_origem  String?
    ou_origem        String?
    criado_por       String? // Username de quem criou
    fechado_por      String? // Username de quem fechou
    data_abertura    DateTime? // Data/hora da abertura do ticket
    data_fechamento  DateTime? // Data/hora do fechamento
    alterado_por     String? // Username de quem fez a última alteração
    data_alteracao   DateTime? // Data/hora da última alteração

    @@index([username])
    @@index([status_ldap])
    @@index([status_sgu])
    @@index([status_ticket])
    @@index([acao])
    @@index([fechado])
    @@index([dias_sem_logar])
    @@index([criado_por])
    @@index([fechado_por])
    @@index([data_abertura])
    @@index([data_fechamento])
    @@index([alterado_por])
    @@map("tickets")
}

enum StatusLDAP {
    ATIVO
    BLOQUEADO
    DESATIVO
    NAO_ENCONTRADO

    @@map("StatusLDAP")
}

enum StatusSGU {
    ENCONTRADO
    NAO_ENCONTRADO

    @@map("StatusSGU")
}

enum StatusTicket {
    PENDENTE
    FECHADO

    @@map("StatusTicket")
}

enum AcaoTicket {
    EXCLUIR
    MANTER
    TRANSFERIR
    TRANSFERIDO
    SERVICO_OUTRO_ORGAO
    BLOQUEAR
    DESBLOQUEAR
    USUARIO_EXCLUIDO
    RETIRAR_ACESSOS

    @@map("AcaoTicket")
}

model Usuario {
    id               Int                @id @default(autoincrement())
    username         String             @unique
    nome             String
    email            String?            @unique
    ativo            Boolean            @default(true)
    admin            Boolean            @default(false)
    data_criacao     DateTime           @default(now())
    data_atualizacao DateTime           @updatedAt
    ultimo_login     DateTime?
    permissoes       UsuarioPermissao[]

    @@map("usuarios")
}

enum Permissao {
    VISUALIZAR_TICKETS
    CRIAR_TICKETS
    EDITAR_TICKETS
    FECHAR_TICKETS
    VISUALIZAR_USUARIOS
    CRIAR_USUARIOS
    EDITAR_USUARIOS
    ADMINISTRAR_SISTEMA

    @@map("Permissao")
}

model UsuarioPermissao {
    id         Int       @id @default(autoincrement())
    usuario_id Int
    permissao  Permissao
    usuario    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

    @@unique([usuario_id, permissao])
    @@map("usuario_permissoes")
}
